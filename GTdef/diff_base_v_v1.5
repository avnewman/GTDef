ckm2LLd.m
24d23
< %  last modified by lfeng Wed Nov 17 16:27:02 EST 2010
46c45
<    error('xx and yy are not consistent!');
---
>    disp('xx and yy are not consistent');
ckm2LL.m
25c25
< %  last modified by lfeng Wed Nov 17 16:14:06 EST 2010
---
> %  last modified by lfeng Mon Sep 20 20:28:31 EDT 2010
32c32
< r = R*(1-ff*sin(lat0*pi/180)^2);  % r - radius at lat [m]
---
> r = R*(1-ff*sin(lat0)^2);  % r - radius at lat [m]
45c45
<    lon = lon0 + x_rot/mpd./cos(lat0*pi/180);
---
>    lon = lon0 + x_rot/mpd./cos(lat0);
47c47
<    error('xx and yy are not consistent!');
---
>    disp('xx and yy are not consistent');
disloc3d_mod2.m
GTdef_addall.m
GTdef_add_diagonal.m
GTdef_ckbd_mask.m
diff: v1.5/GTdef_ckbd_mask.m: No such file or directory
GTdef_ckbd_subflt.m
4,5c4
< % GTdef_ckbd_subflt('nicoya',30,40,3,4,[0 -0.0823 0 0 0 0 0 0 0 ],[ 0 0 0 0 0 0 0 0 0 ])
< % GTdef_ckbd_subflt('nicoya',30,40,3,4,[ 0 0 0 0 0 0 0 0 0 ],[0 -0.0823 0 0 0 0 0 0 0 ])
---
> % GTdef_ckbd_subflt('nicoya',28,30,2,2,[0 -0.09 0 0 0 0 0 0 0 ],[ 0 0 0 0 0 0 0 0 0 ])
GTdef_condense.m
GTdef_diffdips.m
21c21
< % last modified by Lujia Feng Wed Dec  1 18:55:32 EST 2010		  %
---
> % last modified by Lujia Feng Mon Dec  7 07:43:08 EST 2009		  %
50c50
<     if rowsum ~= Nd, error('Dip is not specified correctly!'); end
---
>     if rowsum ~= Nd, disp('dip is not specified correctly!'); return; end
GTdef_fault1.m
GTdef_fault1p_to_okada.m
30,31c30
< % removed find and use any lfeng Wed Dec  1 15:55:19 EST 2010		  %
< % last modified by Lujia Feng Wed Dec  1 15:58:47 EST 2010		  %
---
> % last modified by Lujia Feng Fri Dec  4 23:39:00 EST 2009		  %
38c37
<         ind_r = dip<90;
---
>         ind_r = find(dip<90);
41c40
<         if any(ind_r);
---
>         if ~isempty(ind_r);
48c47
<         ind_v = dip==90;
---
>         ind_v = find(dip==90);
51c50
<         if any(ind_v);
---
>         if ~isempty(ind_v);
58c57
<         ind_l = dip>90;
---
>         ind_l = find(dip>90);
62c61
<         if any(ind_l);
---
>         if ~isempty(ind_l);
72c71
<         M = [ len width depth dip str east north ss ds ts ];
---
>         M = [len width depth dip str east north ss ds ts];
74c73
<         error('Dip must be within [0 180]!');
---
>         disp('dip must be within [0 180]! Return!'); return;
77c76
<    error('Burial depth can not be greater than locking depth!');
---
>    disp('Burial depth is greater than locking depth! Return!'); return;
GTdef_fault2.m
GTdef_fault2p_to_okada.m
28,29c28
< % removed rad2deg find disp, use any lfeng Wed Dec 1 15:48:34 EST 2010	  %
< % last modified by Lujia Feng Wed Dec  1 15:58:17 EST 2010		  %
---
> % last modified by Lujia Feng Fri Dec  4 23:43:59 EST 2009		  %
36c35
<         str = 90-180*atan2(y2-y1,x2-x1)/pi;   % degree CW from N [0-360]
---
>         str = 90-rad2deg(atan2(y2-y1,x2-x1));   % degree CW from N [0-360]
38c37
<         ind_r = dip<90;
---
>         ind_r = find(dip<90);
41c40
<         if any(ind_r);
---
>         if ~isempty(ind_r);
48c47
<         ind_v = dip==90;
---
>         ind_v = find(dip==90);
51c50
<         if any(ind_v);
---
>         if ~isempty(ind_v);
58,59c57,58
<         ind_l = dip>90;
<         dip(ind_l) = dip(ind_l) - 180;      	%  dip [degree] conversion
---
>         ind_l = find(dip>90);
>         dip(ind_l) = dip(ind_l) - 180;      %  dip [degree] conversion
62c61
<         if any(ind_l);
---
>         if ~isempty(ind_l);
72c71
<         M = [ len width depth dip str east north ss ds ts ];
---
>         M = [len width depth dip str east north ss ds ts];
74c73
<         error('Dip must be within [0 180]!');
---
>         disp('dip must be within [0 180]! Return!'); return;
77c76
<    error('Burial depth can not be greater than locking depth!');
---
>    disp('Burial depth is greater than locking depth! Return!'); return;
GTdef_fault3.m
69c69
< % last modified by Lujia Feng Wed Dec  1 18:57:30 EST 2010		  %
---
> % last modified by Lujia Feng Wed Feb 24 13:16:46 EST 2010		  %
72c72
< if size(flt)~=[1 18], error('need a 1*18 fault vector for GTdef_fault3'); end
---
> if size(flt)~=[1 18], disp('need a 1*18 fault vector for GTdef_fault3'); return; end
122c122
<     error('Surface smoothing is wrong!!!');
---
>     disp('Surface smoothing is wrong!!!'); return;
132c132
<     error('Smoothing method is wrong!!!');
---
>     disp('Smoothing method is wrong!!!'); return;
GTdef_fault4.m
67c67
< % last modified by Lujia Feng Wed Dec  1 18:57:58 EST 2010		  %
---
> % last modified by Lujia Feng Wed Feb 24 13:16:56 EST 2010		  %
70c70
< if size(flt)~=[1 18], error('need a 1*18 fault vector for GTdef_fault4'); end
---
> if size(flt)~=[1 18], disp('need a 1*18 fault vector for GTdef_fault4'); return; end
123c123
<     error('Surface smoothing is wrong!!!');
---
>     disp('Surface smoothing is wrong!!!'); return;
133c133
<     error('Smoothing method is wrong!!!');
---
>     disp('Smoothing method is wrong!!!'); return;
GTdef_fault5.m
62c62
< % last modified by Lujia Feng Wed Dec  1 18:58:31 EST 2010		  %
---
> % last modified by Lujia Feng Wed Feb 24 13:21:39 EST 2010		  %
65c65
< if size(flt)~=[1 13], error('need a 1*13 fault vector for GTdef_fault5'); end
---
> if size(flt)~=[1 13], disp('need a 1*13 fault vector for GTdef_fault5'); return; end
126c126
<     error('Surface smoothing is wrong!!!');
---
>     disp('Surface smoothing is wrong!!!'); return;
136c136
<     error('Smoothing method is wrong!!!');
---
>     disp('Smoothing method is wrong!!!'); return;
GTdef_forward.m
GTdef_grid.m
40,41c40
< % use cell array of strings for names lfeng Wed Dec  1 17:20:21 EST 2010  %
< % last modified by Lujia Feng Wed Dec  1 17:20:29 EST 2010		  %
---
> % last modified by Lujia Feng Tue May  5 15:15:03 EDT 2009		  %
70c69
< nod_name = {};
---
> nod_name = '';
74c73
<        nod_name = [ nod_name; name ];   
---
>        nod_name = strvcat(nod_name,name);   
GTdef_invert.m
GTdef.m
1c1
< function [] = GTdef(fin_name,wnum)
---
> function [] = GTdef(fin_name)
8,14c8,9
< % INPUT:									%
< % fin_name - input file name                                            	%
< % wnum     - num of matlab parallel workers to be used				%
< %   0: do not use parallel computing						%
< %   8: up to 8 workers that can be specified                                    %
< %  -1: use parallel computing                                                   %
< %      but number of workers will be determined by the system                   %
---
> % INPUT									  	%
> %   fin_name - input file name                                            	%
30,32c25,26
< % added matlabpool lfeng Wed Dec  1 12:12:00 EST 2010				%
< % edited the origin definition lfeng Thu Apr  7 18:45:35 EDT 2011		%
< % last modified lfeng Thu Apr  7 18:45:48 EDT 2011				%
---
> % added matlabpool lfeng Thu Nov 11 12:07:56 EST 2010				%
> % last modified lfeng Thu Nov 11 12:08:06 EST 2010				%
35,50d28
< %%%%%%%%%%%%%%%%%%%%%%%%%%% specify matlabpool for parallel computing %%%%%%%%%%%%%%%%%%%%%%%%%%%
< if wnum==0		% do not use parallel computing
<    if matlabpool('size')>0
<       matlabpool close
<    end
< elseif wnum<0		% use parallel computing, but do not specify num of workers
<    if matlabpool('size')==0
<       matlabpool
<    end
< elseif wnum<=8
<    if matlabpool('size')==0
<       matlabpool('open',int32(wnum));
<    end
< else
<    error('Matlabpool input is wrong!!!');
< end
58c36
<    ~,~,~,~,~,...
---
>    flt5_name,flt5_num,flt5, bndry_name,bndry,...
69a48,59
>    if pnt_num~=0
>        lonlist = [ lonlist;pnt_loc(:,1) ]; latlist = [ latlist;pnt_loc(:,2) ];
>    end
>    if bsl_num~=0
>        lonlist = [ lonlist;bsl_loc(:,1);bsl_loc(:,4) ]; latlist = [ latlist;bsl_loc(:,2);bsl_loc(:,5) ];
>    end
>    if prf_num~=0
>        lonlist = [ lonlist;prf(:,1);prf(:,3) ]; latlist = [ latlist;prf(:,2);prf(:,4) ];
>    end
>    if grd_num~=0
>        lonlist = [ lonlist;grd(:,3);grd(:,5) ]; latlist = [ latlist;grd(:,4);grd(:,6) ];
>    end
85c75
<     error('Coordinate input is wrong!!!');
---
>     error('Coordinate is wrong!!!');
87a78,82
> % open up matlabpool for parallel computing
> %if matlabpool('size')==0
>    matlabpool
> %end
> 
135c130
< nod_loc = []; nod_crt = []; nod_lon = []; nod_lat = []; nod_name = {};
---
> nod_loc = []; nod_crt = []; nod_lon = []; nod_lat = []; nod_name = '';
141,142c136,137
<         plon = []; plat = []; pname = {};
< 	[ plon,plat,pname ] = GTdef_profile(prf(ii,:),prf_name{ii});
---
>         plon = []; plat = []; pname = '';
> 	[ plon,plat,pname ] = GTdef_profile(prf(ii,:),prf_name(ii,:));
144c139
<     	nod_name = [ nod_name; pname ];   
---
>     	nod_name = strvcat(nod_name,pname);   
149,150c144,145
<         glon = []; glat = []; gname = {};
< 	[ glon,glat,gname ] = GTdef_grid(grd(ii,:),grd_name{ii});
---
>         glon = []; glat = []; gname = '';
> 	[ glon,glat,gname ] = GTdef_grid(grd(ii,:),grd_name(ii,:));
152c147
<     	nod_name = [ nod_name; gname ];   
---
>     	nod_name = strvcat(nod_name,gname);   
219d213
<         cflt_name = flt3_name{ii};
221c215
<     	sub_ind = strcmpi(cflt_name,subflt_name);
---
>     	sub_ind = strmatch(flt3_name(ii,:),subflt_name,'exact');
223c217
<     	dip_ind = strcmpi(cflt_name,dip_name);
---
>     	dip_ind = strmatch(flt3_name(ii,:),dip_name,'exact');
247,249c241,242
<         cflt_name = flt4_name{ii};
<     	% find subfaults for the master fault
<     	sub_ind = strcmpi(cflt_name,subflt_name);
---
>     	% find the subfaults for the master fault
>     	sub_ind = strmatch(flt4_name(ii,:),subflt_name,'exact');
251c244
<     	dip_ind = strcmpi(cflt_name,dip_name);
---
>     	dip_ind = strmatch(flt4_name(ii,:),dip_name,'exact');
262,263c255
< %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% fault5 data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
< flt5_num = 0;
---
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% fault5 data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
265,290c257,281
<     fprintf(1,'\n.......... processing fault type-5 ..........\t');
<     tic
<         if strcmp(coord,'geo')
<            [bx1,by1] = LL2ckmd(bndry(:,3),bndry(:,4),lon0,lat0,0);		% upleft point
<            [bx2,by2] = LL2ckmd(bndry(:,6),bndry(:,7),lon0,lat0,0);		% lower left point
<            [bx3,by3] = LL2ckmd(bndry(:,9),bndry(:,10),lon0,lat0,0);		% lower right point
<            [bx4,by4] = LL2ckmd(bndry(:,12),bndry(:,13),lon0,lat0,0);	% upleft point
<            bndry_crt = [ bx1 by1 bndry(:,5) bx2 by2 bndry(:,8) bx3 by3 bndry(:,11) bx4 by4 bndry(:,14) ];
<         end
<         if strcmp(coord,'local')
<     	bndry_crt = bndry;
<         end
<         for ii = 1:flt5_num
<            cflt_name = flt5_name{ii};
<         	% find subfaults for the master fault
<         	sub_ind = strcmpi(cflt_name,subflt_name);
<         	% find the boundary for fault 5
<         	bnd_ind = strcmpi(cflt_name,bndry_name);
<     	Xgrn5 = []; Bgrn5 = []; Ngrn5 = []; Aeq5 = []; beq5 = []; lb5 = []; ub5 = []; x05 = [];		% reset empty
<             [ Xgrn5,Bgrn5,Ngrn5,sm5,sm5_abs,Aeq5,beq5,lb5,ub5,x05 ] = ...;
<     	GTdef_fault5(flt5,subflt(sub_ind,:),bndry(bnd_ind,:),pnt_crt,bsl_crt,nod_crt,rigidity,poisson,smooth,surf);
<         	[ Xgrn,Bgrn,Ngrn,sm,sm_abs,Aeq,beq,lb,ub,x0 ] = ...
<     	GTdef_addall(Xgrn,Bgrn,Ngrn,sm,sm_abs,Aeq,beq,lb,ub,x0,...
<     	             Xgrn5,Bgrn5,Ngrn5,sm5,sm5_abs,Aeq5,beq5,lb5,ub5,x05);
<         end
<     toc
---
> fprintf(1,'\n.......... processing fault type-5 ..........\t');
> tic
>     if strcmp(coord,'geo')
>        [bx1,by1] = LL2ckmd(bndry(:,3),bndry(:,4),lon0,lat0,0);		% upleft point
>        [bx2,by2] = LL2ckmd(bndry(:,6),bndry(:,7),lon0,lat0,0);		% lower left point
>        [bx3,by3] = LL2ckmd(bndry(:,9),bndry(:,10),lon0,lat0,0);		% lower right point
>        [bx4,by4] = LL2ckmd(bndry(:,12),bndry(:,13),lon0,lat0,0);	% upleft point
>        bndry_crt = [ bx1 by1 bndry(:,5) bx2 by2 bndry(:,8) bx3 by3 bndry(:,11) bx4 by4 bndry(:,14) ];
>     end
>     if strcmp(coord,'local')
> 	bndry_crt = bndry;
>     end
>     for ii = 1:flt5_num
>     	% find the subfaults for the master fault
>     	sub_ind = strmatch(flt5_name(ii,:),subflt_name,'exact');
>     	% find the boundary for fault 5
>     	bnd_ind = strmatch(flt5_name(ii,:),bndry_name,'exact');
> 	Xgrn5 = []; Bgrn5 = []; Ngrn5 = []; Aeq5 = []; beq5 = []; lb5 = []; ub5 = []; x05 = [];		% reset empty
>         [ Xgrn5,Bgrn5,Ngrn5,sm5,sm5_abs,Aeq5,beq5,lb5,ub5,x05 ] = ...;
> 	GTdef_fault5(flt5,subflt(sub_ind,:),bndry(bnd_ind,:),pnt_crt,bsl_crt,nod_crt,rigidity,poisson,smooth,surf);
>     	[ Xgrn,Bgrn,Ngrn,sm,sm_abs,Aeq,beq,lb,ub,x0 ] = ...
> 	GTdef_addall(Xgrn,Bgrn,Ngrn,sm,sm_abs,Aeq,beq,lb,ub,x0,...
> 	             Xgrn5,Bgrn5,Ngrn5,sm5,sm5_abs,Aeq5,beq5,lb5,ub5,x05);
>     end
> toc
304c295
<     fout_name = [ basename '_fwd.out' ];
---
>     fout_name = strcat(basename,'_fwd.out');
309c300
< 	  	 flt4_name,flt4_num,flt4,{},0,[],{},[],...
---
> 	  	 flt4_name,flt4_num,flt4,flt5_name,flt5_num,flt5,bndry_name,bndry,...
343c334
<           = GTdef_slips(lb,ub,xx,flt1_num,flt1,flt2_num,flt2,flt3_name,flt3_num,flt3,flt4_name,flt4_num,flt4,{},0,[]);
---
>           = GTdef_slips(lb,ub,xx,flt1_num,flt1,flt2_num,flt2,flt3_name,flt3_num,flt3,flt4_name,flt4_num,flt4,flt5_name,flt5_num,flt5);
348c339
<               	     flt4_name,flt4_num,flt4,{},0,[],{},[],...
---
>               	     flt4_name,flt4_num,flt4,flt5_name,flt5_num,flt5,bndry_name,bndry,...
353c344
<     fout_sum = [ basename '_inv.out' ];
---
>     fout_sum = strcat(basename,'_inv.out');
358c349
< if matlabpool('size')>0
---
> %if matlabpool('size')>0
360c351
< end
---
> %end
GTdef_open.m
21,23c21,22
< % The function reads in  							%
< % (1) Parameters are not case sensitive						%
< % 		  coord         string                  {geo}			%
---
> % The function reads in								%
> % (1) Parameters: coord         string                  {geo}			%
31c30
< %                 surf          string			{free}		   	%
---
> %                 surf         string			{free}		   	%
40c39
< %   If not provided by the input file, default values in {} will be used.       %
---
> %   If not provided by the input file, default values will be used.		%
47a47,48
> %  flt5 - [?
> %  boundary?
76,78c77
< % use cell array of strings for names lfeng Wed Dec  1 14:41:46 EST 2010	%
< % commented out 'fault5' lfeng Wed Dec  1 14:42:53 EST 2010			%
< % last modified by Lujia Feng Wed Dec  1 14:52:00 EST 2010			%
---
> % last modified by Lujia Feng Wed Feb 24 13:40:43 EST 2010			%
91,103c90,101
< % use CELL ARRAY OF STRINGS for names
< flt1_num = 0;  	 flt1_name = {};    flt1 = []; 
< flt2_num = 0;    flt2_name = {};    flt2 = []; 
< flt3_num = 0;    flt3_name = {};    flt3 = []; 
< flt4_num = 0;    flt4_name = {};    flt4 = []; 
< flt5_num = 0;    flt5_name = {};    flt5 = []; 
< bndry_num = 0;   bndry_name = {};   bndry= [];
< subflt_num = 0;  subflt_name = {};  subflt = []; 
< dip_num = 0;     dip_name = {};     dip = [];
< pnt_num = 0;     pnt_name = {};     pnt_loc = []; pnt_disp = []; pnt_err = []; pnt_wgt = []; 
< bsl_num = 0;     bsl_name = {};     bsl_loc = []; bsl_disp = []; bsl_err = []; bsl_wgt = []; 
< prf_num = 0;     prf_name = {};     prf = []; 
< grd_num = 0;     grd_name = {};     grd = [];
---
> flt1_num = 0;  	 flt1_name = '';    flt1 = []; 
> flt2_num = 0;    flt2_name = '';    flt2 = []; 
> flt3_num = 0;    flt3_name = '';    flt3 = []; 
> flt4_num = 0;    flt4_name = '';    flt4 = []; 
> flt5_num = 0;    flt5_name = '';    flt5 = []; 
> bndry_num = 0;   bndry_name = '';   bndry= [];
> subflt_num = 0;  subflt_name = '';  subflt = []; 
> dip_num = 0;     dip_name = '';     dip = [];
> pnt_num = 0;     pnt_name = '';     pnt_loc = []; pnt_disp = []; pnt_err = []; pnt_wgt = []; 
> bsl_num = 0;     bsl_name = '';     bsl_loc = []; bsl_disp = []; bsl_err = []; bsl_wgt = []; 
> prf_num = 0;     prf_name = '';     prf = []; 
> grd_num = 0;     grd_name = '';     grd = [];
120c118
<     if strcmpi(flag,'coord')
---
>     if strcmp(flag,'coord')
125c123
<     if strcmpi(flag,'smooth')
---
>     if strcmp(flag,'smooth')
130c128
<     if strcmpi(flag,'surface')
---
>     if strcmp(flag,'surface')
135c133
<     if strcmpi(flag,'kappa')
---
>     if strcmp(flag,'kappa')
162c160
<     if strcmpi(flag,'beta')
---
>     if strcmp(flag,'beta')
189c187
<     if strcmpi(flag,'rigidity')
---
>     if strcmp(flag,'rigidity')
194c192
<     if strcmpi(flag,'poisson')
---
>     if strcmp(flag,'poisson')
201c199
<     if strcmpi(flag,'fault')
---
>     if strcmp(flag,'fault')
206c204
< 	    flt1_num = flt1_num+1; flt1_name = [ flt1_name; name ];
---
> 	    flt1_num = flt1_num+1; flt1_name = strvcat(flt1_name,name);
215c213
< 	    flt2_num = flt2_num+1; flt2_name = [ flt2_name; name ];
---
> 	    flt2_num = flt2_num+1; flt2_name = strvcat(flt2_name,name);
224c222
< 	    flt3_num = flt3_num+1; flt3_name = [ flt3_name; name ];
---
> 	    flt3_num = flt3_num+1; flt3_name = strvcat(flt3_name,name);
233c231
< 	    flt4_num = flt4_num+1; flt4_name = [ flt4_name; name ];
---
> 	    flt4_num = flt4_num+1; flt4_name = strvcat(flt4_name,name);
239,247c237,245
< 	%%% fault 5 %%
< 	%if strcmp(method,'5')
<         %[name,remain] = strtok(remain);
< 	%    flt5_num = flt5_num+1; flt5_name = [ flt5_name; name ];
< 	%    for ii = 1:13
<  	%	[ flt5(flt5_num,ii),remain ] = GTdef_read1double(remain);
< 	%    end
< 	%    continue
< 	%end
---
> 	%% fault 5 %%
> 	if strcmp(method,'5')
>         [name,remain] = strtok(remain);
> 	    flt5_num = flt5_num+1; flt5_name = strvcat(flt5_name,name);
> 	    for ii = 1:13
>  		[ flt5(flt5_num,ii),remain ] = GTdef_read1double(remain);
> 	    end
> 	    continue
> 	end
251c249
<     if strcmpi(flag,'subfault')
---
>     if strcmp(flag,'subfault')
253c251
< 	subflt_num = subflt_num+1; subflt_name = [ subflt_name; name ];
---
> 	subflt_num = subflt_num+1; subflt_name = strvcat(subflt_name,name);
259,267c257,265
<     %%%%%% boundary for fault 5 patches %%%%%
<     %if strcmpi(flag,'boundary')
<     %    [name,remain] = strtok(remain);
<     %    bndry_num = bndry_num+1; bndry_name = [ bndry_name; name ];
<     %    for ii = 1:14
<     %        [ bndry(bndry_num,ii),remain ] = GTdef_read1double(remain);
<     %    end
<     %    continue
<     %end
---
>     %%%%% boundary for fault 5 patches %%%%%
>     if strcmp(flag,'boundary')
>         [name,remain] = strtok(remain);
> 	bndry_num = bndry_num+1; bndry_name = strvcat(bndry_name,name);
> 	for ii = 1:14
>  	    [ bndry(bndry_num,ii),remain ] = GTdef_read1double(remain);
> 	end
> 	continue
>     end
269c267
<     if strcmpi(flag,'dip')
---
>     if strcmp(flag,'dip')
271c269
< 	dip_num = dip_num+1; dip_name = [ dip_name; name ];
---
> 	dip_num = dip_num+1; dip_name = strvcat(dip_name,name);
279c277
<     if strcmpi(flag,'point')
---
>     if strcmp(flag,'point')
284c282
<             pnt_num = pnt_num+1; pnt_name = [ pnt_name; name ];
---
>             pnt_num = pnt_num+1; pnt_name = strvcat(pnt_name,name);
307c305
<             pnt_num = pnt_num+1; pnt_name = [ pnt_name; name ];
---
>             pnt_num = pnt_num+1; pnt_name = strvcat(pnt_name,name);
334c332
<             pnt_num = pnt_num+1; pnt_name = [ pnt_name; name ];
---
>             pnt_num = pnt_num+1; pnt_name = strvcat(pnt_name,name);
359c357
<     if strcmpi(flag,'baseline')
---
>     if strcmp(flag,'baseline')
364c362
<             bsl_num = bsl_num+1; bsl_name = [ bsl_name; name ];
---
>             bsl_num = bsl_num+1; bsl_name = strvcat(bsl_name,name);
387c385
<             bsl_num = bsl_num+1; bsl_name = [ bsl_name; name ];
---
>             bsl_num = bsl_num+1; bsl_name = strvcat(bsl_name,name);
414c412
<             bsl_num = bsl_num+1; bsl_name = [ bsl_name; name ];
---
>             bsl_num = bsl_num+1; bsl_name = strvcat(bsl_name,name);
439c437
<     if strcmpi(flag,'profile')
---
>     if strcmp(flag,'profile')
441c439
< 	prf_num = prf_num+1; prf_name = [ prf_name; name ];
---
> 	prf_num = prf_num+1; prf_name = strvcat(prf_name,name);
448c446
<     if strcmpi(flag,'grid')
---
>     if strcmp(flag,'grid')
450c448
< 	grd_num = grd_num+1; grd_name = [ grd_name; name ];
---
> 	grd_num = grd_num+1; grd_name = strvcat(grd_name,name);
466a465
> 
468c467
< if strcmpi(coord,'geo')
---
> if coord==1
506c505,506
<     error('The input file is wrong!');
---
>     disp('The input file is wrong!');
>     return; 
519c519
< ind = lon>180;
---
> ind = find(lon>180); 
GTdef_output.m
68,71c68
< % use cell array of strings for names lfeng Wed Dec  1 17:36:42 EST 2010	%
< % use 4 digits after . for slip constraints lfeng Thu Dec  9 03:52:06 EST 2010  %
< % test existence before output lfeng Thu Apr 14 12:58:16 EDT 2011		%
< % last modified by Lujia Feng Thu Apr 14 13:23:49 EDT 2011			%
---
> % last modified by Lujia Feng Tue Jul 27 15:16:36 EDT 2010			%
77,79c74
< if ~isempty(mod_info)
<     fprintf(fout,'#data_num\t%d\n#slip_num\t%d\n#ndf     \t%d\n#rss      \t%-12.5e [m^2]\n#rms      \t%-12.5e [m]\n#wrss   \t%-12.5e [m^2]\n#wrms   \t%-12.5e [m]\n#chi2    \t%-12.5e\n#rchi2   \t%-12.5e\n#r_1d   \t%-12.5e [cm/km]\n#r_2d   \t%-12.5e [cm/km^2]\n#strain   \t%-12.5e [cm/km]\n',mod_info);
< end
---
> fprintf(fout,'#data_num\t%d\n#slip_num\t%d\n#ndf     \t%d\n#rss      \t%-12.5e [m^2]\n#rms      \t%-12.5e [m]\n#wrss   \t%-12.5e [m^2]\n#wrms   \t%-12.5e [m]\n#chi2    \t%-12.5e\n#rchi2   \t%-12.5e\n#r_1d   \t%-12.5e [cm/km]\n#r_2d   \t%-12.5e [cm/km^2]\n#strain   \t%-12.5e [cm/km]\n',mod_info);
81,90c76,77
< if ~isempty(beta)
<     kappa = sqrt(beta);
<     fprintf(fout,'kappa   \t%-12.5f\nbeta     \t%-12.5f\n',kappa,beta);
< end
< if ~isempty(rigidity)
<     fprintf(fout,'rigidity\t%-10.2e\n',rigidity);
< end
< if ~isempty(poisson)
<     fprintf(fout,'poisson \t%-6.4f\n',poisson);
< end
---
> kappa = sqrt(beta);
> fprintf(fout,'kappa   \t%-12.5f\nbeta     \t%-12.5f\nrigidity\t%-10.2e\npoisson \t%-6.4f\n',kappa,beta,rigidity,poisson);
93,98c80
< if ~isempty(smooth)
<     fprintf(fout,'smooth   \t%s\n',smooth);
< end
< if ~isempty(surf)
<     fprintf(fout,'surface  \t%s\n',surf);
< end
---
> fprintf(fout,'smooth   \t%s\nsurface  \t%s\n',smooth,surf);
102c84
<     fprintf(fout,'fault 1 %s  %-14.8f %-12.8f %-6.4e %12.4e %-12.4e %-5.2f %-5.2f  %10.5f %-8.5f %-8.5f  %-5.4f %-5.4f  %-5.4f %-5.4f  %-5.4f %-5.4f\n',flt1_name{ii},flt1(ii,:));
---
>     fprintf(fout,'fault 1 %s  %-14.8f %-12.8f %-6.4e %12.4e %-12.4e %-5.2f %-5.2f  %10.5f %-8.5f %-8.5f  %-5.2f %-5.2f  %-5.2f %-5.2f  %-5.2f %-5.2f\n',flt1_name(ii,:),flt1(ii,:));
107c89
<     fprintf(fout,'fault 2 %s  %-14.8f %-12.8f %14.8f %-12.8f %12.4e %-12.4e %-5.2f  %10.5f %-8.5f %-8.5f  %-5.4f %-5.4f  %-5.4f %-5.4f  %-5.4f %-5.4f\n',flt2_name{ii},flt2(ii,:));
---
>     fprintf(fout,'fault 2 %s  %-14.8f %-12.8f %14.8f %-12.8f %12.4e %-12.4e %-5.2f  %10.5f %-8.5f %-8.5f  %-5.2f %-5.2f  %-5.2f %-5.2f  %-5.2f %-5.2f\n',flt2_name(ii,:),flt2(ii,:));
112,116c94,97
<     flt_name = flt3_name{ii};
<     fprintf(fout,'fault 3 %s  %-14.8f %-12.8f %-6.4e %12.4e %-12.4e %-5.2f %-5.2f  %10.5f %-8.5f %-8.5f  %-5.4f %-5.4f  %-5.4f %-5.4f  %-5.4f %-5.4f    %d %d\n',flt_name,flt3(ii,:));
<     ind = strcmpi(flt_name,subflt_name);
<     subflt_num = sum(ind);
<     subflt3 = subflt(ind,:);
---
>     flt_name = flt3_name(ii,:);
>     fprintf(fout,'fault 3 %s  %-14.8f %-12.8f %-6.4e %12.4e %-12.4e %-5.2f %-5.2f  %10.5f %-8.5f %-8.5f  %-5.2f %-5.2f  %-5.2f %-5.2f  %-5.2f %-5.2f    %d %d\n',flt3_name(ii,:),flt3(ii,:));
>     ind = strmatch(flt_name,subflt_name,'exact');
>     subflt_num = length(ind);
118c99
<         fprintf(fout,'     subfault %s  %5d %5d  %10.5f %-8.5f %-8.5f  %-5.4f %-5.4f  %-5.4f %-5.4f  %-5.4f %-5.4f\n',flt_name,subflt3(jj,:));
---
>         fprintf(fout,'     subfault %s  %5d %5d  %10.5f %-8.5f %-8.5f  %-5.2f %-5.2f  %-5.2f %-5.2f  %-5.2f %-5.2f\n',flt_name,subflt(ind(jj),:));
124,128c105,108
<     flt_name = flt4_name{ii};
<     fprintf(fout,'fault 4 %s  %-14.8f %-12.8f %14.8f %-12.8f %12.4e %-12.4e %-5.2f  %10.5f %-8.5f %-8.5f  %-5.4f %-5.4f  %-5.4f %-5.4f  %-5.4f %-5.4f    %d %d\n',flt_name,flt4(ii,:));
<     ind = strcmpi(flt_name,subflt_name);
<     subflt_num = sum(ind);
<     subflt4 = subflt(ind,:);
---
>     flt_name = flt4_name(ii,:);
>     fprintf(fout,'fault 4 %s  %-14.8f %-12.8f %14.8f %-12.8f %12.4e %-12.4e %-5.2f  %10.5f %-8.5f %-8.5f  %-5.2f %-5.2f  %-5.2f %-5.2f  %-5.2f %-5.2f    %d %d\n',flt_name,flt4(ii,:));
>     ind = strmatch(flt_name,subflt_name,'exact');
>     subflt_num = length(ind);
130c110
<         fprintf(fout,'     subfault %s  %5d %5d  %10.5f %-8.5f %-8.5f  %-5.4f %-5.4f  %-5.4f %-5.4f  %-5.4f %-5.4f\n',flt_name,subflt4(jj,:));
---
>         fprintf(fout,'     subfault %s  %5d %5d  %10.5f %-8.5f %-8.5f  %-5.2f %-5.2f  %-5.2f %-5.2f  %-5.2f %-5.2f\n',flt_name,subflt(ind(jj),:));
137,140c117,119
<     fprintf(fout,'fault 5 %s  %10.5f %-8.5f %-8.5f  %-5.4f %-5.4f  %-5.4f %-5.4f  %-5.4f %-5.4f   %d  %d  %-5.2f  %-5.2f\n',flt_name,flt5(ii,:));
<     ind = strcmpi(flt_name,subflt_name);
<     subflt_num = sum(ind);
<     subflt5 = subflt(ind,:);
---
>     fprintf(fout,'fault 5 %s  %10.5f %-8.5f %-8.5f  %-5.2f %-5.2f  %-5.2f %-5.2f  %-5.2f %-5.2f   %d  %d  %-5.2f  %-5.2f\n',flt_name,flt5(ii,:));
>     ind = strmatch(flt_name,subflt_name,'exact');
>     subflt_num = length(ind);
142c121
<         fprintf(fout,'     subfault %s  %-d %-d  %10.5f %-8.5f %-8.5f  %-5.4f %-5.4f  %-5.4f %-5.4f  %-5.4f %-5.4f\n',flt_name,subflt5(jj,:));
---
>         fprintf(fout,'     subfault %s  %-d %-d  %10.5f %-8.5f %-8.5f  %-5.2f %-5.2f  %-5.2f %-5.2f  %-5.2f %-5.2f\n',flt_name,subflt(ind(jj),:));
144,146c123,124
<     ind = strcmpi(flt_name,bndry_name);
<     bndry_num = sum(ind);
<     bndry5 = bndry(ind,:);
---
>     ind = strmatch(flt_name,bndry_name,'exact');
>     bndry_num = length(ind);
148c126
<         fprintf(fout,'     boundary %s  %-d %-d  %-14.8f %-12.8f %14.8f %-14.8f %-12.8f %14.8f %-14.8f %-12.8f %14.8f %-14.8f %-12.8f %14.8f\n',flt_name,bndry5(jj,:));
---
>         fprintf(fout,'     boundary %s  %-d %-d  %-14.8f %-12.8f %14.8f %-14.8f %-12.8f %14.8f %-14.8f %-12.8f %14.8f %-14.8f %-12.8f %14.8f\n',flt_name,bndry(ind(jj),:));
155c133
<     fprintf(fout,'dip   %s  %8.4f  %-12.4e  %-12.4e  %-d\n',dip_name{ii},dip(ii,:));
---
>     fprintf(fout,'dip   %s  %8.4f  %-12.4e  %-12.4e  %-d\n',dip_name(ii,:),dip(ii,:));
160c138
<     fprintf(fout,'point 3 %s     %-14.8f %-12.8f %-6.4e  %10.5f %-8.5f %-8.5f  %8.5f %-8.5f %-8.5f  %-5.2f\n', pnt_name{ii},pnt_out(ii,:));
---
>     fprintf(fout,'point 3 %s     %-14.8f %-12.8f %-6.4e  %10.5f %-8.5f %-8.5f  %8.5f %-8.5f %-8.5f  %-5.2f\n', pnt_name(ii,:),pnt_out(ii,:));
165c143
<     fprintf(fout,'baseline 3 %s     %-14.8f %-12.8f %-6.4e  %14.8f %-12.8f %-6.4e  %10.5f %-8.5f %-8.5f %-8.5f  %8.5f %-8.5f %-8.5f %-8.5f  %5.2f\n', bsl_name{ii},bsl_out(ii,:));
---
>     fprintf(fout,'baseline 3 %s     %-14.8f %-12.8f %-6.4e  %14.8f %-12.8f %-6.4e  %10.5f %-8.5f %-8.5f %-8.5f  %8.5f %-8.5f %-8.5f %-8.5f  %5.2f\n', bsl_name(ii,:),bsl_out(ii,:));
170,171c148
<     name = prf_name{ii};
<     name_len = length(name);
---
>     name = prf_name(ii,:);
173,176c150,151
<     ind = strncmpi(name,nod_name,name_len);
<     nod_num = sum(ind); 
<     cnod_name = nod_name(ind);
<     cnod_out = nod_out(ind,:);
---
>     ind = strmatch(name,nod_name);
>     nod_num = length(ind); 
178c153
<     	fprintf(fout,'point 3 %s     %-14.8f %-12.8f %-6.4e  %10.5f %-8.5f %-8.5f  %8.5f %-8.5f %-8.5f  %-5.2f\n',cnod_name{jj},cnod_out(jj,:));
---
>     	fprintf(fout,'point 3 %s     %-14.8f %-12.8f %-6.4e  %10.5f %-8.5f %-8.5f  %8.5f %-8.5f %-8.5f  %-5.2f\n', nod_name(ind(jj),:),nod_out(ind(jj),:));
184,185c159
<     name = grd_name{ii};
<     name_len = length(name);
---
>     name = grd_name(ii,:);
187,190c161,162
<     ind = strncmpi(name,nod_name,name_len);
<     nod_num = sum(ind); 
<     cnod_name = nod_name(ind);
<     cnod_out = nod_out(ind,:);
---
>     ind = strmatch(name,nod_name); 
>     nod_num = length(ind);
192c164
<     	fprintf(fout,'point 3 %s     %-14.8f %-12.8f %-6.4e  %10.5f %-8.5f %-8.5f  %8.5f %-8.5f %-8.5f  %-5.2f\n',cnod_name{jj},cnod_out(jj,:));
---
>     	fprintf(fout,'point 3 %s     %-14.8f %-12.8f %-6.4e  %10.5f %-8.5f %-8.5f  %8.5f %-8.5f %-8.5f  %-5.2f\n',nod_name(ind(jj),:),nod_out(ind(jj),:));
GTdef_prjfault1_EW.m
40,41c40
< % removed disp find, use any lfeng Wed Dec  1 16:07:09 EST 2010		  %
< % last modified by lfeng Wed Dec  1 16:07:17 EST 2010			  %
---
> % last modified by lfeng Tue Jul 27 02:23:01 EDT 2010			  %
44c43
< if size(flt,2)~=18, error('need a n*18 fault vector for GTdef_prjfault1_EW');  end
---
> if size(flt,2)~=18, disp('need a n*18 fault vector for GTdef_prjfault1'); return; end
58,59c57,58
<         ind_v = dip==90;
< 	if any(ind_v)
---
>         ind_v = find(dip==90);
> 	if ~isempty(ind_v)
68,69c67,68
<         ind = dip~=90;
< 	if any(ind)
---
>         ind = find(dip~=90);
> 	if ~isempty(ind)
91c90
<         error('dip must be within [0 180]!');
---
>         disp('dip must be within [0 180]! Return!'); return;
94c93
<    error('Burial depth is greater than locking depth!');
---
>    disp('Burial depth is greater than locking depth! Return!'); return;
GTdef_prjfault1.m
39,40c39
< % removed find, use any lfeng Wed Dec  1 16:04:04 EST 2010		  %
< % last modified by Lujia Feng Wed Dec  1 16:04:13 EST 2010		  %
---
> % last modified by Lujia Feng Sat Dec  5 02:32:28 EST 2009		  %
43c42
< if size(flt,2)~=18, error('need a n*18 fault vector for GTdef_prjfault1'); end
---
> if size(flt,2)~=18, disp('need a n*18 fault vector for GTdef_prjfault1'); return; end
54,55c53,54
<         ind_v = dip==90;
< 	if any(ind_v)
---
>         ind_v = find(dip==90);
> 	if ~isempty(ind_v)
64,65c63,64
<         ind = dip~=90;
< 	if any(ind)
---
>         ind = find(dip~=90);
> 	if ~isempty(ind)
87c86
<         error('dip must be within [0 180]!');
---
>         disp('dip must be within [0 180]! Return!'); return;
90c89
<    error('Burial depth is greater than locking depth!');
---
>    disp('Burial depth is greater than locking depth! Return!'); return;
GTdef_prjfault2_EW.m
39,40c39
< % removed find disp, use any lfeng Wed Dec  1 16:02:03 EST 2010		  %
< % last modified by lfeng  Wed Dec  1 16:02:13 EST 2010			  %
---
> % last modified by lfeng Tue Jul 27 02:25:40 EDT 2010			  %
43c42
< if size(flt,2)~=18, error('need a n*18 fault vector for GTdef_prjfault2_EW'); end
---
> if size(flt,2)~=18, disp('need a n*18 fault vector for GTdef_prjfault2'); return; end
53c52
<         %str = 90-180*atan2(y2-y1,x2-x1)/pi;   % degree CW from N [0-360]
---
>         %str = 90-rad2deg(atan2(y2-y1,x2-x1));   % degree CW from N [0-360]
56,57c55,56
<         ind_v = dip==90;
< 	if any(ind_v)
---
>         ind_v = find(dip==90);
> 	if ~isempty(ind_v)
65,66c64,65
<         ind = dip~=90;
< 	if any(ind)
---
>         ind = find(dip~=90);
> 	if ~isempty(ind)
86c85
<         error('Dip must be within [0 180]!');
---
>         disp('dip must be within [0 180]! Return!'); return;
89c88
<    error('Burial depth can not be greater than locking depth!');
---
>    disp('Burial depth is greater than locking depth! Return!'); return;
GTdef_prjfault2.m
38,39c38
< % removed rad2deg & find, use any lfeng Wed Dec  1 15:40:19 EST 2010	  %
< % last modified by Lujia Feng Wed Dec  1 16:01:00 EST 2010		  %
---
> % last modified by Lujia Feng Sat Dec  5 02:33:53 EST 2009		  %
42c41
< if size(flt,2)~=18, error('need a n*18 fault vector for GTdef_prjfault2'); end
---
> if size(flt,2)~=18, disp('need a n*18 fault vector for GTdef_prjfault2'); return; end
52c51
<         str = 90-180*atan2(y2-y1,x2-x1)/pi;   % degree CW from N [0-360]
---
>         str = 90-rad2deg(atan2(y2-y1,x2-x1));   % degree CW from N [0-360]
54,55c53,54
<         ind_v = dip==90;
< 	if any(ind_v)
---
>         ind_v = find(dip==90);
> 	if ~isempty(ind_v)
63,64c62,63
<         ind = dip~=90;
< 	if any(ind)
---
>         ind = find(dip~=90);
> 	if ~isempty(ind)
84c83
<         error('Dip must be within [0 180]!');
---
>         disp('dip must be within [0 180]! Return!'); return;
87c86
<    error('Burial depth can not be greater than locking depth!');
---
>    disp('Burial depth is greater than locking depth! Return!'); return;
GTdef_prjfault3_EW.m
43c43
< % last modified by lfeng Wed Dec  1 16:11:31 EST 2010			  %
---
> % last modified by lfeng Tue Jul 27 02:27:26 EDT 2010			  %
46c46
< if size(flt)~=[1 18], error('need a 1*18 fault vector for GTdef_prjfault3_EW'); end
---
> if size(flt)~=[1 18], disp('need a 1*18 fault vector for GTdef_fault3'); return; end
GTdef_prjfault3.m
43c43
< % last modified by Lujia Feng Wed Dec  1 16:11:55 EST 2010		  %
---
> % last modified by Lujia Feng Mon Dec  7 07:48:03 EST 2009		  %
46c46
< if size(flt)~=[1 18], error('need a 1*18 fault vector for GTdef_prjfault3'); end
---
> if size(flt)~=[1 18], disp('need a 1*18 fault vector for GTdef_fault3'); return; end
GTdef_prjfault4_EW.m
42c42
< % last modified by lfeng Wed Dec  1 16:10:49 EST 2010			  %
---
> % last modified by lfeng Tue Jul 27 02:29:00 EDT 2010			  %
45c45
< if size(flt)~=[1 18], error('need a 1*18 fault vector for GTdef_prjfault4_EW'); end
---
> if size(flt)~=[1 18], disp('need a 1*18 fault vector for GTdef_fault4'); return; end
GTdef_prjfault4.m
42c42
< % last modified by Lujia Feng Wed Dec  1 16:11:07 EST 2010		  %
---
> % last modified by Lujia Feng Mon Dec  7 06:14:55 EST 2009		  %
45c45
< if size(flt)~=[1 18], error('need a 1*18 fault vector for GTdef_prjfault4');  end
---
> if size(flt)~=[1 18], disp('need a 1*18 fault vector for GTdef_fault4'); return; end
GTdef_prjpnt.m
10c10
< %  fault1 & fault3							  %
---
> %  fault1 &fault3							  %
12c12
< %  fault2 & fault4							  %
---
> %  fault2 &fault4							  %
16c16
< % OUTPUT: (output to a file, the format is)				  %
---
> % OUTPUT (output to a file, the format is)				  %
18,22c18,19
< %   flt_name Dstr1 Dstr2 Ddip Dvert ]					  %
< %    Dstr1 - distance along fault strike from endpoint 1		  %
< %            strike direction is positive				  %
< %    Dstr2 - distance along fault strike from endpoint 2		  %
< %            strike direction is negative				  %
---
> %   flt_name Dstr Ddip Dvert ]					  	  %
> %    Dstr - distance along fault strike from endpoint 1			  %
30,32c27
< % use cell array of strings for names lfeng Wed Dec  1 15:19:07 EST 2010  %
< % added Dstr2 lfeng Fri Dec 10 14:40:19 EST 2010			  %
< % last modified by Lujia Feng Fri Dec 10 14:52:13 EST 2010		  %
---
> % last modified by Lujia Feng Tue Dec  8 18:23:02 EST 2009		  %
36c31
< if datanum~=16&&datanum~=18, error('need a n*16 or n*18 fault vector for GTdef_prjpnt'); end
---
> if datanum~=16&&datanum~=18, disp('need a n*16 or n*18 fault vector for GTdef_faults'); return; end
64,65c59
<     Dstr1 = dist.*cosd(strdiff);		% Dstr can be negative if it's off the fault plane
<     Dstr2 = len-Dstr1;
---
>     Dstr = dist.*cosd(strdiff);			% Dstr can be negative if it's off the fault plane
69c63
<         fprintf(fout,'point 3 %s %-14.8f %-12.8f %-6.4e %10.5f %-10.5f %-10.5f %8.5f %-8.5f %-8.5f %-5.2f %s %12.4e %12.4e %12.4e %12.4e\n',pnt_name{ii},pnt_cur,flt_name{jj},Dstr1(jj),Dstr2(jj),Ddip(jj),Dvert(jj));
---
>         fprintf(fout,'point 3 %s  %-14.8f  %-12.8f  %-6.4e %10.5f %-8.5f %-8.5f  %8.5f %-8.5f %-8.5f  %-5.2f  %s %12.4e %12.4e %12.4e\n',pnt_name(ii,:),pnt_cur,flt_name(jj,:),Dstr(jj),Ddip(jj),Dvert(jj));
GTdef_profile.m
19d18
< % use cell array of strings for names lfeng Wed Dec  1 17:21:46 EST 2010  %
27c26
< nod_name = {};
---
> nod_name = '';
30c29
<     nod_name = [ nod_name; name ];   
---
>     nod_name = strvcat(nod_name,name);   
GTdef_project_EW.m
30c30
< % last modified by lfeng Wed Dec  1 16:22:56 EST 2010			  %
---
> % last modified by lfeng Tue Jul 27 02:21:02 EDT 2010			  %
40c40
<    ~,~,~,~,~,...
---
>    flt5_name,flt5_num,flt5,bndry_name,bndry,...
49c49
< if strcmpi(coord,'geo')
---
> if strcmp(coord,'geo')
77,78c77,78
< elseif strcmpi(coord,'local')~=1
<     error('Coordinate input is wrong!!!');
---
> elseif strcmp(coord,'local')~=1
>     disp('Coordinate is wrong!!!');
81,86c81
< %basename = strtok(fin_name,'.');	% noly works for names without "."
< cellname = regexp(fin_name,'\.(in|out)','split');
< basename = char(cellname(1));
< 
< 
< prjflt = []; flt_name = {}; prjflt1 = []; prjflt2 = []; prjflt3 = []; prjflt4 = [];
---
> prjflt = []; flt_name = ''; prjflt1 = []; prjflt2 = []; prjflt3 = []; prjflt4 = [];
91c86
<     if strcmpi(coord,'geo')
---
>     if strcmp(coord,'geo')
94c89
<     if strcmpi(coord,'local')
---
>     if strcmp(coord,'local')
99,100c94,95
<     prjflt = [ prjflt; prjflt1 ];
<     flt_name = [ flt_name; flt1_name ];   
---
>     prjflt = [ prjflt ; prjflt1 ];
>     flt_name = strvcat(flt_name,flt1_name);   
108c103
<     if strcmpi(coord,'geo')
---
>     if strcmp(coord,'geo')
112c107
<     if strcmpi(coord,'local')
---
>     if strcmp(coord,'local')
118,119c113,114
<     prjflt = [ prjflt; prjflt2 ];
<     flt_name = [ flt_name; flt2_name ];   
---
>     prjflt = [ prjflt ; prjflt2 ];
>     flt_name = strvcat(flt_name,flt2_name);   
127c122
<     if strcmpi(coord,'geo')
---
>     if strcmp(coord,'geo')
130c125
<     if strcmpi(coord,'local')
---
>     if strcmp(coord,'local')
135,145c130,139
<        Nd = flt3(ii,17); Ns = flt3(ii,18); flt_num = Nd*Ns;
<        cflt_name = flt3_name{ii};
<        % find the subfaults for the master fault
<        sub_ind = strcmpi(cflt_name,subflt_name);
<        % find dips for the master fault
<        dip_ind = strcmpi(cflt_name,dip_name);
<        [ prjflt3 ] = GTdef_prjfault3_EW(newflt3(ii,:),subflt(sub_ind,:),dip(dip_ind,:));
<        prjflt = [ prjflt; prjflt3 ];
<        name3 = cell(flt_num,1);
<        for ii = 1:flt_num, name3{ii} = cflt_name; end
<        flt_name = [ flt_name; name3 ];   
---
>         Nd = flt3(ii,17); Ns = flt3(ii,18); flt_num = Nd*Ns;
>     	% find the subfaults for the master fault
>     	sub_ind = strmatch(flt3_name(ii,:),subflt_name,'exact');
> 	% find dips for the master fault
>     	dip_ind = strmatch(flt3_name(ii,:),dip_name,'exact');
> 	[ prjflt3 ] = GTdef_prjfault3_EW(newflt3(ii,:),subflt(sub_ind,:),dip(dip_ind,:));
>         prjflt = [ prjflt ; prjflt3 ];
> 	name = flt3_name(ii,:);
> 	subflt_name = name(ones(flt_num,1),:);
>         flt_name = strvcat(flt_name,subflt_name);   
154c148
<     if strcmpi(coord,'geo')
---
>     if strcmp(coord,'geo')
158c152
<     if strcmpi(coord,'local')
---
>     if strcmp(coord,'local')
164,174c158,167
<        Nd = flt4(ii,17); Ns = flt4(ii,18); flt_num = Nd*Ns;
<        cflt_name = flt4_name{ii};
<        % find the subfaults for the master fault
<        sub_ind = strcmpi(cflt_name,subflt_name);
<        % find dips for the master fault
<        dip_ind = strcmpi(cflt_name,dip_name);
<        [ prjflt4 ] = GTdef_prjfault4_EW(newflt4(ii,:),subflt(sub_ind,:),dip(dip_ind,:));
<        prjflt = [ prjflt; prjflt4 ];
<        name4 = cell(flt_num,1);
<        for ii = 1:flt_num, name4{ii} = cflt_name; end
<        flt_name = [ flt_name; name4 ];   
---
>         Nd = flt4(ii,17); Ns = flt4(ii,18); flt_num = Nd*Ns;
>     	% find the subfaults for the master fault
>     	sub_ind = strmatch(flt4_name(ii,:),subflt_name,'exact');
> 	% find dips for the master fault
>     	dip_ind = strmatch(flt4_name(ii,:),dip_name,'exact');
> 	[ prjflt4 ] = GTdef_prjfault4_EW(newflt4(ii,:),subflt(sub_ind,:),dip(dip_ind,:));
>         prjflt = [ prjflt ; prjflt4 ];
> 	name = flt4_name(ii,:);
> 	subflt_name = name(ones(flt_num,1),:);
>         flt_name = strvcat(flt_name,subflt_name);   
181c174
< if strcmpi(coord,'geo')
---
> if strcmp(coord,'geo')
186c179
< if strcmpi(coord,'local')
---
> if strcmp(coord,'local')
189a183
> basename = strtok(fin_name,'.');
197c191
<     name = flt_name{ii};
---
>     name = flt_name(ii,:);
GTdef_project.m
38,41c38
< % added cross-section file lfeng Thu Dec  2 05:14:18 EST 2010			%
< % added Dstr2 lfeng Fri Dec 10 14:42:02 EST 2010				%
< % made origion only dependent on faults lfeng Sun Apr 10 17:11:15 EDT 2011	%
< % last modified by lfeng Sun Apr 10 17:12:54 EDT 2011				%
---
> % last modified by lfeng Mon Oct 25 18:30:10 EDT 2010				%
51c48
<    ~,~,~,~,~,...
---
>    flt5_name,flt5_num,flt5,bndry_name,bndry,...
60c57
< if strcmpi(coord,'geo')
---
> if strcmp(coord,'geo')
61a59,70
>    if pnt_num~=0
>        lonlist = [ lonlist;pnt_loc(:,1) ]; latlist = [ latlist;pnt_loc(:,2) ];
>    end
>    if bsl_num~=0
>        lonlist = [ lonlist;bsl_loc(:,1);bsl_loc(:,4) ]; latlist = [ latlist;bsl_loc(:,2);bsl_loc(:,5) ];
>    end
>    if prf_num~=0
>        lonlist = [ lonlist;prf(:,1);prf(:,3) ]; latlist = [ latlist;prf(:,2);prf(:,4) ];
>    end
>    if grd_num~=0
>        lonlist = [ lonlist;grd(:,3);grd(:,5) ]; latlist = [ latlist;grd(:,4);grd(:,6) ];
>    end
76,77c85,86
< elseif strcmpi(coord,'local')~=1
<     error('Coordinate input is wrong!!!');
---
> elseif strcmp(coord,'local')~=1
>     disp('Coordinate is wrong!!!');
90c99
<     if strcmpi(coord,'geo')
---
>     if strcmp(coord,'geo')
93c102
<     if strcmpi(coord,'local')
---
>     if strcmp(coord,'local')
102c111
<     fprintf(fpnt,'#(1)point (2)3 (3)name (4)lon (5)lat (6)z (7)Ue (8)Un (9)Uv (10)eUe (11)eUn (12)eUv (13)weight (14)fault name (15)Dstr1  (16)Dstr2 (17)Ddip (18)Dvert\n'); 
---
>     fprintf(fpnt,'#point(1) 3(2) name(3) lon(4) lat(5) z(6) Ue(7) Un(8) Uv(9) eUe(10) eUn(11) eUv(12) weight(13) flt name(14) Dstr(15) Ddip(16) Dvert(17)\n'); 
107,108c116,117
< xsect = []; xsect_name = {};
< prjflt = []; flt_name = {}; prjflt1 = []; prjflt2 = []; prjflt3 = []; prjflt4 = [];
---
> 
> prjflt = []; flt_name = ''; prjflt1 = []; prjflt2 = []; prjflt3 = []; prjflt4 = [];
113c122
<     if strcmpi(coord,'geo')
---
>     if strcmp(coord,'geo')
116c125
<     if strcmpi(coord,'local')
---
>     if strcmp(coord,'local')
120,122d128
<     [ xsect1_name,xsect1 ] = GTdef_xsection(1,flt1_name,newflt1,[]);
<     xsect = [ xsect; xsect1 ];
<     xsect_name = [ xsect_name; xsect1_name ];   
128,129c134,135
<     prjflt = [ prjflt; prjflt1 ];
<     flt_name = [ flt_name; flt1_name ];   
---
>     prjflt = [ prjflt ; prjflt1 ];
>     flt_name = strvcat(flt_name,flt1_name);   
137c143
<     if strcmpi(coord,'geo')
---
>     if strcmp(coord,'geo')
141c147
<     if strcmpi(coord,'local')
---
>     if strcmp(coord,'local')
146,148d151
<     [ xsect2_name,xsect2 ] = GTdef_xsection(2,flt2_name,newflt2,[]);
<     xsect = [ xsect; xsect2 ];
<     xsect_name = [ xsect_name; xsect2_name ];   
154,155c157,158
<     prjflt = [ prjflt; prjflt2 ];
<     flt_name = [ flt_name; flt2_name ];   
---
>     prjflt = [ prjflt ; prjflt2 ];
>     flt_name = strvcat(flt_name,flt2_name);   
163c166
<     if strcmpi(coord,'geo')
---
>     if strcmp(coord,'geo')
166c169
<     if strcmpi(coord,'local')
---
>     if strcmp(coord,'local')
175d177
<        cflt_name = flt3_name{ii};
177c179
<        sub_ind = strcmpi(cflt_name,subflt_name);
---
>        sub_ind = strmatch(flt3_name(ii,:),subflt_name,'exact');
179,182c181
<        dip_ind = strcmpi(cflt_name,dip_name);
<        [ xsect3_name,xsect3 ] = GTdef_xsection(3,cflt_name,newflt3(ii,:),dip(dip_ind,:));
<        xsect = [ xsect; xsect3 ];
<        xsect_name = [ xsect_name; xsect3_name ];   
---
>        dip_ind = strmatch(flt3_name(ii,:),dip_name,'exact');
184,187c183,186
<        prjflt = [ prjflt; prjflt3 ];
<        name3 = cell(flt_num,1);
<        for ii = 1:flt_num, name3{ii} = cflt_name; end
<        flt_name = [ flt_name; name3 ];   
---
>        prjflt = [ prjflt ; prjflt3 ];
>        name = flt3_name(ii,:);
>        subflt_name = name(ones(flt_num,1),:);
>        flt_name = strvcat(flt_name,subflt_name);   
196c195
<     if strcmpi(coord,'geo')
---
>     if strcmp(coord,'geo')
200c199
<     if strcmpi(coord,'local')
---
>     if strcmp(coord,'local')
210d208
<        cflt_name = flt4_name{ii};
212c210
<        sub_ind = strcmpi(cflt_name,subflt_name);
---
>        sub_ind = strmatch(flt4_name(ii,:),subflt_name,'exact');
214,217c212
<        dip_ind = strcmpi(cflt_name,dip_name);
<        [ xsect4_name,xsect4 ] = GTdef_xsection(4,cflt_name,newflt4(ii,:),dip(dip_ind,:));
<        xsect = [ xsect; xsect4 ];
<        xsect_name = [ xsect_name; xsect4_name ];   
---
>        dip_ind = strmatch(flt4_name(ii,:),dip_name,'exact');
219,222c214,217
<        prjflt = [ prjflt; prjflt4 ];
<        name4 = cell(flt_num,1);
<        for ii = 1:flt_num, name4{ii} = cflt_name; end
<        flt_name = [ flt_name; name4 ];   
---
>        prjflt = [ prjflt ; prjflt4 ];
>        name = flt4_name(ii,:);
>        subflt_name = name(ones(flt_num,1),:);
>        flt_name = strvcat(flt_name,subflt_name);   
226c221
< if ~isempty(pnt_crt), fclose(fpnt); end
---
> if ~isempty(pnt_crt) fclose(fpnt); end
230c225
< if strcmpi(coord,'geo')
---
> if strcmp(coord,'geo')
235c230
< if strcmpi(coord,'local')
---
> if strcmp(coord,'local')
239d233
< % surface file
243c237
< fprintf(fout,'#(1)name (2)dnum (3)snum (4)xtop1 (5)ytop1 (6)xbot1 (7)ybot1 (8)xbot2 (9)ybot2 (10)xtop2 (11)ytop2 (12)xctr (13)yctr (14)ss[m] (15)ds[m] (16)ts[m]\n'); 
---
> fprintf(fout,'#name(1) dnum(2) snum(3) xtop1(4) ytop1(5) xbot1(6) ybot1(7) xbot2(8) ybot2(9) xtop2(10) ytop2(11) xctr(12) yctr(13) ss[m](14) ds[m](15) ts[m](16)\n'); 
247c241
<     name = flt_name{ii};
---
>     name = flt_name(ii,:);
250,263d243
< end
< fclose(fout);
< 
< % cross-section file
< fout_fname = strcat(basename,'_xsection.out');
< fout = fopen(fout_fname,'w');
< 
< fprintf(fout,'# (1)fault name (2)index (3)dip (4)x1[m] (5)z1[m] (6)x2[m] (7)z2[m] (8)width[m] (9)rows\n'); 
< row = size(xsect,1);
< 
< for ii =1:row
<     name = xsect_name{ii};
<     sct = xsect(ii,:);
<     fprintf(fout,'%s  %-5d  %6.2f    %12.4e   %-14.6e   %-12.4e %-14.6e    %-14.6e  %-d\n',name,sct);
GTdef_slips.m
36,37c36
< % use cell array of strings for names lfeng Wed Dec  1 17:50:08 EST 2010	%
< % last modified by Lujia Feng Wed Dec  1 17:50:15 EST 2010			%
---
> % last modified by Lujia Feng Fri Dec 11 22:35:40 EST 2009			%
47c46
< subflt_name = {}; subflt_out = []; subflt = [];
---
> subflt_name = ''; subflt_out = []; subflt = [];
77,80c76,78
< 	flt_name = flt3_name{ii};
<         name = cell(flt_num,1);
<         for ii = 1:flt_num, name{ii} = flt_name; end
< 	subflt_name = [ subflt_name; name ];   
---
> 	flt_name = flt3_name(ii,:);
> 	name = flt_name(ones(flt_num,1),:);
> 	subflt_name = strvcat(subflt_name,name);   
97,100c95,97
< 	flt_name = flt4_name{ii};
<         name = cell(flt_num,1);
<         for ii = 1:flt_num, name{ii} = flt_name; end
< 	subflt_name = [ subflt_name; name ];   
---
> 	flt_name = flt4_name(ii,:);
> 	name = flt_name(ones(flt_num,1),:);
> 	subflt_name = strvcat(subflt_name,name);   
118,120c115,116
<         name = cell(flt_num,1);
<         for ii = 1:flt_num, name{ii} = flt_name; end
< 	subflt_name = [ subflt_name; name ];   
---
> 	name = flt_name(ones(flt_num,1),:);
> 	subflt_name = strvcat(subflt_name,name);   
GTdef_sm1d_2pctr_free.m
49c49
< if nn==1, error('Only one patch. No need to smooth!'); end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_sm1d_3pbwd_rtdw_free.m
55c55
< if nn==1, error('Only one patch. No need to smooth!'); end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_sm1d_3pbwd_rtdw.m
50c50
< if nn==1, error('Only one patch. No need to smooth!'); end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_sm1d_3pbwd_uprt_free.m
56c56
< if nn==1, error('Only one patch. No need to smooth!'); end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_sm1d_3pbwd_uprt.m
51c51
< if nn==1, error('Only one patch. No need to smooth!'); end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_sm1d_3pfwd_rtdw_free.m
55c55
< if nn==1, error('Only one patch. No need to smooth!');  end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_sm1d_3pfwd_rtdw.m
53c53
< if nn==1, error('Only one patch. No need to smooth!');  end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_sm1d_3pfwd_uprt_free.m
54c54
< if nn==1, error('Only one patch. No need to smooth!'); end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_sm1d_3pfwd_uprt.m
52c52
< if nn==1, error('Only one patch. No need to smooth!'); end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_sm1d_8pctr_rtdw_free.m
51c51
< if nn==1, error('Only one patch. No need to smooth!'); end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_sm1d_8pctr_uprt_free.m
51c51
< if nn==1, error('Only one patch. No need to smooth!'); end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_sm2d_free.m
51c51
< if nn==1, error('Only one patch. No need to smooth!'); end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_sm2d.m
47c47
< if nn==1, error('Only one patch. No need to smooth!'); end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_sm_fixed.m
GTdef_sm_free.m
GTdef_strain_free.m
49c49
< if nn==1, error('Only one patch. No need to smooth!'); end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_strain.m
47c47
< if nn==1, error('Only one patch. No need to smooth!'); end
---
> if nn==1, disp('Only one patch. No need to smooth!'); return; end
GTdef_strike.m
18c18
< if col~=1&&row==1, error('Inputs have to be vectors for GTdef_strike'); end
---
> if col~=1&&row==1, disp('inputs have to be vectors for GTdef_strike'); return; end
GTdef_summary.m
GTdef_xsection.m
diff: v1.5/GTdef_xsection.m: No such file or directory
LL2ckmd.m
25d24
< %  last modified by lfeng Wed Nov 17 16:17:03 EST 2010
46c45
<    error('lon and lat are not consistent!'); 
---
>    disp('lon and lat are not consistent'); 
LL2ckm.m
25c25
< %  last modified by lfeng Wed Nov 17 16:31:28 EST 2010
---
> %  last modified by lfeng Mon Sep 20 20:28:47 EDT 2010
32c32
< r = R*(1-ff*sin(lat0*pi/180)^2);  % r - radius at lat [m]
---
> r = R*(1-ff*sin(lat0)^2);  % r - radius at lat [m]
41c41
<    xx = (lon-lon0)*mpd.*cos(lat0*pi/180);
---
>    xx = (lon-lon0)*mpd.*cos(lat0);
46c46
<    error('lon and lat are not consistent!'); 
---
>    disp('lon and lat are not consistent'); 
