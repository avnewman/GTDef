# GTdef Structures

##############################################################################################
#                                  modspace structure                                        #
##############################################################################################
# fault1 & fault2 have three (strike, dip, and tensile) components, so                  
# slip_num = flt_num*3 = Nd*Ns*3                                                        
# fault3 & fault4 have two (rake slip and tensile slip) components, so                  
# slip_num = flt_num*2 = Nd*Ns*2                                                        
# - read in from input file
coord     - coordinate system in the input file                  (string)       {geo}       
          = 'geo'           geographic coordiante				         
            'geo_polyconic' geographic using polyconic projection                 
            'local'         cartesian coordinate				        
origin    = [ lon0 lat0 ]                                        (1x2)          {[]}          
smooth    - smoothing method                                     (string)       {2d}    
          = '2d'            2nd derivative 3-point central                                
            '1d2pc'         1st derivative 2-point central			       
            '1d3pf'         1st derivative 3-point forward                                
            '1d3pb'         1st derivative 3-point backward                               
surf      - surface constraint                                   (string)       {free}  
          = 'free'          assume free-surface				               
            'fixed'         surface is fixed not to move                                               
grnflag   - whether to output green's functions                  (string)       {off}                                        
          = 'off' do not calculate green's function                               
            'on'  calculate green's function                                      
sdropflag - whether to calculate stress drop                     (string)       {off}                                        
          = 'off' do not calculate stress drop                               
            'on'  calculate stress drop
resolflag - whether to output resolution matrix
matflag   - whether to save MATLAB workspace to a mat file
          = 'off' do not save
          = 'on' do save
kappa     - a list of smoothing weights                          (1*kappa_num)  {0}  
            usually for 2nd derivative   
beta 	  - a list of smoothing weights                          (1*beta_num)   {0}  
            usually for 1st derivative

# - built up before running a model
Xgrn      - site displacements from unit slips                     
          = [east;north;vertical]                                ((3*nn)*slip_num)
Lgrn      - los displacements from unit slips                     
          = [los]                                                ((1*nn)*slip_num)
Bgrn      - baseline length changes from unit slips              
          = [east;north;vertical;length]                         ((4*nn)*slip_num)
Ngrn      - node displacements from unit slips                   
          = [east;north;vertical]                                ((3*nn)*slip_num)
Aineq     - left  side matrix for linear inequalities            ((flt_num*2)*slip_num)
bineq     - right side vector for linear inequalities            (flt_num*2)      
Aeq       - left  side matrix for linear equalities              (slip_num*slip_num)
beq       - right side vector for linear equalities              (slip_num*1)      
x0        - initial values for ss,ds,ts 	                 (slip_num*1)           
xx        - final values for ss,ds,ts 	                         (slip_num*1)
lb        - lower bounds for ss,ds,ts 	                         (slip_num*1)          
ub        - upper bounds for ss,ds,ts	                         (slip_num*1)	       
sm        - smoothing matrix for slips                           (slip_num*slip_num)     
          = sm_1d2pc, sm_1d3pf, sm_1d3pb, or sm_2d                                       
sm_abs    - matrix for calculating the absolute 1st derivative		               

# - built up after  running a model
modinfo   - model results info for each beta/kappa			               
          = [data_num slip_num ndf rss rms wrss wrms chi2 rchi2 r_1d r_2d]               

          data_num - number of data points (not including nan)                         
          slip_num - number of free slips					       
          ndf      - nominal number of degrees of freedom 			       
                     since we introduce smoothing, slips are not independent	         
                     we don't really know the real ndf 				 
          rss      - residual sum of squares [m^2]                          	       
          rms      - root mean square of rss = sqrt(rss/data_num) [m]                  
          wrss     - weighted residual sum of squares [m^2]			       
          wrms     = sqrt(wrss/data_num) [m]					       
          chi2     - chi-square 		 				       
          rchi2    - reduced chi-square = chi2/ndf                                     
          r_1d     - the average 1st derivative sum of each patch [cm/km]	       
                     depends on the finite difference method used		       
          r_2d     - the average 2nd derivative sum of each patch		       
                      (eq. 5 in Jonsson_etal_BSSA_2002) [cm/km^2]		       
          strain   - average strain of each patch [cm/km]			       
                      (absolute value of 1st derivaitves)			       
          r represents roughness						       

##############################################################################################
#                                    Earth structure                                         #
##############################################################################################
# - read in from input file
type      - type of earth model                  (string)  {'homogeneous'}
          = 'homogeneous'                            
          = 'layered'	        	     
earth.rigidity  - shear modulus		         (scalar)  {30e9 Pa}
earth.poisson	- poisson's ratio	                 (scalar)  {0.25}
# edgrn structure
edgrn.obsz  - uniform observation depth                                    (scalar)
edgrn.nr    - number of equidistant radial distances [m]                   (scalar)
edgrn.minr  - minimum radial distance [m]                                  (scalar)
edgrn.maxr  - maximum radial distance [m]                                  (scalar)
edgrn.nz    - number of equidistant source depths [m]                      (scalar)
edgrn.minz  - minimum source depths [m]                                    (scalar)
edgrn.maxz  - maximum source depths [m]                                    (scalar)
edgrn.srate - sampling rate for wavenumber integration [10-128]                    
    Note: the larger the value is, the more accurate the results are               

layer       - [ id depth vp vs ro ]	         (nn*5)

# - built up before running a model
edgrn.dr    - radial distance step [m]           (scalar)
edgrn.dz    - source depth step [m]              (scalar)
edgrn.rr    - radial distances [m]               (1*nr row vector)
edgrn.zz    - source depths [m]                  (nz*1 column vector)
edgrn.r0    - point source scale [m]             (scale)

# from layer to calculate
sublayer.nl    - number of sublayers                                          (scalar)
sublayer.topz  - top depth of each sublayer [m]                   (nl*1 column vector)
sublayer.botz  - bottom depth of each sublayer [m]                (nl*1 column vector)
sublayer.hh    - thickness of each sublayer [m]                   (nl*1 column vector)
sublayer.vp    - P-wave velocity for each sublayer [m/s]          (nl*1 column vector)
sublayer.vs    - S-wave velocity for each sublayer [m/s]          (nl*1 column vector)
sublayer.ro    - density for each sublayer [kg/m^3]               (nl*1 column vector)

edgrnfcts - green's function library
point strike-slip source                                     
      ssdisp0(1-3): Uz, Ur, Ut                               
      ssstrn(1-6): Ezz,Err,Ett,Ezr=Erz,Ert=Etr,Etz=Ezt       
      ssuzr(1)                                               
point dip-slip source                                        
      dsdisp(1-3): Uz, Ur, Ut                                
      dsstrn(1-6): Ezz,Err,Ett,Ezr=Erz,Ert=Etr,Etz=Ezt       
      dsuzr(1)                                               
point clvd source                                            
      cldisp(1-2): Uz, Ur (Ut=0)                             
      clstrn(1-4): Ezz,Err,Ett,Ezr=Erz (Ert=Etr=Etz=Ezt=0)   
      cluzr(1)                                               
Note ssdisp is a Matlab function, so ssdisp0 is used instead 

       	                                              
##############################################################################################
#                                   Fault structure                                          #
##############################################################################################
#subflt order: along dip first, then along strike
# - read in from input file
flt?.name      - fault name
flt?.num       - number of faults for each fault type
flt?.flt       - input fault info

flt1.flt       = [lon1 lat1 z1 z2 len str dip ss ds ts ss0 ssX ds0 dsX ts0 tsX Nd Ns]          
flt2.flt       = [lon1 lat1 lon2 lat2 z1 z2 dip ss ds ts ss0 ssX ds0 dsX ts0 tsX Nd Ns]        
   subflt.flt  = [ dnum snum ss ds ts ss0 ssX ds0 dsX ts0 tsX ]		  	              
flt3.flt       = [lon1 lat1 z1 z2 len str dip rake rs ts rake0 rakeX rs0 rsX ts0 tsX Nd Ns]    
flt4.flt       = [lon1 lat1 lon2 lat2 z1 z2 dip rake rs ts rake0 rakeX rs0 rsX ts0 tsX Nd Ns]  
   subflt.flt  = [dnum snum rake rs ts rake0 rakeX rs0 rsX ts0 tsX]                          
flt5.flt       = [ss ds ts ss0 ssX ds0 dsX ts0 tsX Nd Ns]                                      
flt5.geoname   - geometry file name
flt5.colname   - column names for geometry file
   subflt.flt  = [dnum snum ss ds ts ss0 ssX ds0 dsX ts0 tsX]		  	              
flt6.flt       = [rake rs ts rake0 rakeX rs0 rsX ts0 tsX Nd Ns]
flt6.geoname   - geometry file name
flt6.colname   - column names for geometry file
   subflt.flt  = [dnum snum rake rs ts rake0 rakeX rs0 rsX ts0 tsX]                          
flt7.flt       = [ss ds ts ss0 ssX ds0 dsX ts0 tsX Nd Ns]                                      
flt7.grname    - file name for green functions

# - built up before running a model
flt?.xyzflt stucture for fault patch info in cartesian coordinate
xyzflt.xyzctr  - location of center points in cartesian coordinate                             
               = [ xx yy zz ]                                      (flt_num*3)
xyzflt.xyztop1 - location of top upper corners in cartesian coordinate 
               = [ xx yy zz ]                                      (flt_num*3)
zz elevation positive upward
xyzflt.suv     - unit vector in the strike direction
               = [ xx yy zz ]                                      (flt_num*3)
xyzflt.duv     - unit vector in the dip direction
               = [ xx yy zz ]                                      (flt_num*3)
xyzflt.nuv     - normal unit vector
               = [ xx yy zz ]                                      (flt_num*3)
                                                                        Cin     Min
xyzflt.SSgrn   - strike-slip stress kernels                        (6*flt_num*flt_num)
xyzflt.DSgrn   - dip-slip stress kernels                           (6*flt_num*flt_num)
xyzflt.TSgrn   - tensile-slip stress kernels                       (6*flt_num*flt_num)

xyzflt.compnum - component number                                  (scalar)

# - read in from input file, can be updated after running a model
xyzflt.Min     - subflt info in cartesian coordinate                                           
   Okada       = [len width depth dip str east north ss ds ts]     (flt_num*10)
   layered     = [slip north east depth length width str dip rake] (flt_num*9)

# - built up after running a model
flt?.out       - similar to flt?.flt
flt?.sdrop     - slip-averaged stress drop

##############################################################################################
#                                 Subfault structure                                         #
##############################################################################################
# - read in from input file
subflt.num     - number of subfaults
subflt.name    - name of master faults
subflt.flt     - input subfault parameters
               = [ dnum snum ss ds ts ss0 ssX ds0 dsX ts0 tsX ]
# - built up after running a model
subflt.outname - name of master faults for new subfaults
subflt.out     - new subfault parameters
               = [ dnum snum ss ds ts ss0 ssX ds0 dsX ts0 tsX ]

##############################################################################################
#                                   Addon structure                                          #
##############################################################################################
# - read in from input file
addon.dipname  - name of master faults
addon.dipnum   - number of dips
addon.dip      - dip parameters  		
               = [ dip z1 z2 rows ] need to be used with addon.dipname

addon.strname  - name of master faults
addon.strnum   - number of dips 
addon.str      - strike parameters
               = [ lon1 lat1 lon2 lat2 columns sweepAngle ] need to be used with addon.strname
# - built up after running a model
addon.crt      = [sx1 sy1 sx2 sy2 addon.str(:,[5 6])]

##############################################################################################
#                                    Point Structure                                         #
##############################################################################################
# - read in from input file
pnt.num     - number of point data               (scalar)
pnt.name    - names of point data                (cell array)
pnt.loc     - geographic location 
            = [lon lat zz]                       (nn*3)
pnt.disp    - displacements       
            = [east north vert]                  (nn*3)
pnt.err     - errors              
            = [east north vert]                  (nn*3)
pnt.wgt     - station weights      
            = [weight]	                         (nn*1)    {1}
                                                                              
# - built up before running a model
pnt.crt     - cartesian location  
Xin         = [xx yy zz]                         (nn*3) # zz elevation positive upward
pnt.obs     - observation vector  
            = [east;north;vert]		         (3nn*1)
pnt.obs_err - error vector        
            = [east;north;vert]		         (3nn*1)
pnt.obs_wgt - weight vector       
            = [pnt.wgt;pnt.wgt;pnt.wgt]          (3nn*1) 
	      [east;north;vertical]		      
pnt.coef    - coefficient vector  
            = sqrt(pnt.obs_wgt)./pnt.obs_err     (3nn*1)

# - built up after running a model
pnt.out     - output prediction for points       (nn*10)
            = [lon lat zz Ue Un Uv eUe eUn eUv weight]

##############################################################################################
#                                    InSAR LOS Structure                                     #
##############################################################################################
# - read in from input file
los.num     - number of point data               (scalar)
los.name    - names of point data                (cell array)
los.loc     - geographic location 
            = [lon lat zz]                       (nn*3)
los.disp    - displacements       
            = [los]                              (nn*1)
los.err     - errors              
            = [los]                              (nn*1)
los.wgt     - station weights      
            = [weight]	                         (nn*1)    {1}
                                                                              
# - built up before running a model
los.crt     - cartesian location + los direction
            = [xx yy zz]                         (nn*3) # zz elevation positive upward
los.dir     - unit vector pointing from the ground toward the satellite (LOS direction)
            = [dirE dirN dirV]
Lin         = [los.crt los.dir]                  (nn*6)
            = [xx yy zz dirE dirN dirV]          (nn*6)
los.obs     - observation vector  
            = [los]		                 (nn*1)
los.obs_err - error vector        
            = [los]		                 (nn*1)
los.obs_wgt - weight vector       
            = [los.wgt]                          (nn*1) 
los.coef    - coefficient vector  
            = sqrt(los.obs_wgt)./los.obs_err     (nn*1)

# - built up after running a model
los.out     - output prediction for baselines    (nn*9)
            = [lon lat zz ULOS eULOS LOSdirE LOSdirN LOSdirV weight]

##############################################################################################
#                                  Baseline Structure                                        #
##############################################################################################
# - read in from input file
bsl.num     - number of baselines                (scalar)
bsl.name    - names of baselines                 (cell array)
bsl.loc     - geographic location 
            = [lon1 lat1 z1 lon2 lat2 z2]        (nn*6)
bsl.disp    - displacements & baseline changes 
            = [east north vert absolute]   	 (nn*4)
bsl.err     - errors
            = [east north vert absolute]   	 (nn*4)
bsl.wgt     - station weights 
            = [weight]                     	 (nn*1)

# - built up before running a model
bsl.crt     - cartesian location  
Bin         = [bx1 by1 bz1 bx2 by2 bz2]          (nn*6) # bz1 & bz2 elevation positive upward
bsl.obs     - observation vector
            = [east;north;vert;length]           (4nn*1)
bsl.obs_err - error vector
            = [east;north;vert;length]           (4nn*1)
bsl.obs_wgt - weight vector
            = [bsl.wgt;bsl.wgt;bsl.wgt;bsl.wgt]  (4nn*1)
              [east;north;vertical;length]
bsl.coef    - coefficient vector
            = sqrt(bsl.obs_wgt)./bsl.obs_err     (4nn*1)

# - built up after running a model
bsl.out     - output predictions for baselines   (nn*15)
            = [lon1 lat1 z1 lon2 lat2 z2 Ue Un Uv Ul eUe eUn eUv eUl wgt]

##############################################################################################
#                                  Profile Structure                                         #
##############################################################################################
prf.num     - number of profiles                 (scalar)
prf.name    - names of profiles			 (cell array)
prf.prf     - profile parameters 
            = [lon1 lat1 lon2 lat2 N]		 (nn*5)
              lon1,lat1 - the lower-left corner of the profile
              lon2,lat2 - the upper-right corner of the profile
              N         - number of profile nodes

##############################################################################################
#                                    Grid structure                                          #
##############################################################################################
grd.num  - number of grids 			 (scalar)
grd.name - names of grids			 (cell array)
grd.grd  - grid parameters
         = [Erot Nrot lon1 lat1 lon2 lat2 Ne Nn] (nn*8)
           Erot      - rotation angle for east of grid [degree] (-90 90)
           Nrot      - rotation angle for north of grid [degree] (-90 90)
                + CW; - CCW; xrot and yrot can not be 90 or -90
           lon1,lat1 - the lower-left corner of the grid
           lon2,lat2 - the upper-right corner of the grid
           lon3,lat3 - the lower-right corner of the grid
           lon4,lat4 - the upper-left corner of the grid
           Ne        - number of grid nodes along east
           Nn        - number of grid nodes along north

##############################################################################################
#                                    Node structure                                          #
##############################################################################################
# - built up before running a model
nod.name - name of nodes                         (cell array)
nod.loc	 - geographic location
Nin      = [lon lat zz]                          (3*nn) # zz elevation positive upward
nod.crt  - cartesian location
         = [xx yy zz]                            (3*nn)

# - built up after running a model
nod.out  - output predictions for nodes          (nn*10)
         = [lon lat zz Ue Un Uv eUe eUn eUv weight]

##############################################################################################
#                                  Other structures                                          #
##############################################################################################
Point:                                                                   
sspnt.num  - number of points for stress calculation (scalar)             
sspnt.name - names of points                      (cell array)            
sspnt.loc  - [lon lat zz]                         (nn*3)                  
sspnt.str  - [strike]                             (nn*1)                  
sspnt.dip  - [dip]                                (nn*1)                  
sspnt.rake - [rake]                               (nn*1)                  
sspnt.fric - [friction]                           (nn*1)                  

Fault:                                                                        
ssflt?.fltnum  - number of faults for stress calculation  (scalar)            
ssflt?.fltname - names of faults                   (cell array)            
ssflt?.flt  - fault parameters                     (flt_num*11)            
             								   
ssflt1.flt = [lon1 lat1 z1   z2   len str dip rake fric Nd Ns]             
ssflt2.flt = [lon1 lat1 lon2 lat2 z1  z2  dip rake fric Nd Ns]             
